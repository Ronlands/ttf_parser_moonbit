// Generated using `moon info`, DON'T EDIT IT
package "Ronlands/ttf_parser_moonbit/type"

// Values
fn[T] make_error(String) -> ParseResult[T]

fn make_font_features(Bool, Bool, Bool, Int, Array[String]) -> FontFeatures

fn make_font_header(Int, Int, Int, Int, Int) -> FontHeader

fn make_font_info(String, String, String, String, Int, Int, Int, Int, Int) -> FontInfo

fn make_head_table(Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int) -> HeadTable

fn make_hhea_table(Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, Int) -> HheaTable

fn make_maxp_table(Int, Int, Int, Int, Int, Int) -> MaxpTable

fn make_name_record(Int, Int, Int, Int, Int, Int, String) -> NameRecord

fn make_name_table(Int, Int, Int, Array[NameRecord]) -> NameTable

fn[T] make_success(T) -> ParseResult[T]

fn make_table_directory(FontHeader, Array[TableDirectoryEntry]) -> TableDirectory

fn make_table_entry(String, Int, Int, Int) -> TableDirectoryEntry

// Errors

// Types and methods
pub struct FontFeatures {
  has_color : Bool
  has_variable : Bool
  has_opentype_features : Bool
  table_count : Int
  supported_tables : Array[String]
}
fn FontFeatures::output(Self, &Logger) -> Unit // from trait `Show`
fn FontFeatures::to_string(Self) -> String // from trait `Show`
impl Show for FontFeatures

pub struct FontHeader {
  version : Int
  num_tables : Int
  search_range : Int
  entry_selector : Int
  range_shift : Int
}
fn FontHeader::output(Self, &Logger) -> Unit // from trait `Show`
fn FontHeader::to_string(Self) -> String // from trait `Show`
impl Show for FontHeader

pub struct FontInfo {
  name : String
  family : String
  style : String
  version : String
  num_glyphs : Int
  units_per_em : Int
  ascender : Int
  descender : Int
  line_gap : Int
}
fn FontInfo::output(Self, &Logger) -> Unit // from trait `Show`
fn FontInfo::to_string(Self) -> String // from trait `Show`
impl Show for FontInfo

pub struct HeadTable {
  version : Int
  font_revision : Int
  checksum_adjustment : Int
  magic_number : Int
  flags : Int
  units_per_em : Int
  created : Int
  modified : Int
  x_min : Int
  y_min : Int
  x_max : Int
  y_max : Int
  mac_style : Int
  lowest_rec_ppem : Int
  font_direction_hint : Int
  index_to_loc_format : Int
  glyph_data_format : Int
}
fn HeadTable::output(Self, &Logger) -> Unit // from trait `Show`
fn HeadTable::to_string(Self) -> String // from trait `Show`
impl Show for HeadTable

pub struct HheaTable {
  version : Int
  ascender : Int
  descender : Int
  line_gap : Int
  advance_width_max : Int
  min_left_side_bearing : Int
  min_right_side_bearing : Int
  x_max_extent : Int
  caret_slope_rise : Int
  caret_slope_run : Int
  caret_offset : Int
  metric_data_format : Int
  number_of_h_metrics : Int
}
fn HheaTable::output(Self, &Logger) -> Unit // from trait `Show`
fn HheaTable::to_string(Self) -> String // from trait `Show`
impl Show for HheaTable

pub struct MaxpTable {
  version : Int
  num_glyphs : Int
  max_points : Int
  max_contours : Int
  max_composite_points : Int
  max_composite_contours : Int
}
fn MaxpTable::output(Self, &Logger) -> Unit // from trait `Show`
fn MaxpTable::to_string(Self) -> String // from trait `Show`
impl Show for MaxpTable

pub struct NameRecord {
  platform_id : Int
  encoding_id : Int
  language_id : Int
  name_id : Int
  length : Int
  offset : Int
  value : String
}
fn NameRecord::output(Self, &Logger) -> Unit // from trait `Show`
fn NameRecord::to_string(Self) -> String // from trait `Show`
impl Show for NameRecord

pub struct NameTable {
  format : Int
  count : Int
  string_offset : Int
  records : Array[NameRecord]
}
fn NameTable::output(Self, &Logger) -> Unit // from trait `Show`
fn NameTable::to_string(Self) -> String // from trait `Show`
impl Show for NameTable

pub enum ParseResult[T] {
  Success(T)
  Error(String)
}
fn[T : Show] ParseResult::output(Self[T], &Logger) -> Unit // from trait `Show`
fn[T : Show] ParseResult::to_string(Self[T]) -> String // from trait `Show`
impl[T : Show] Show for ParseResult[T]

pub struct TableDirectory {
  header : FontHeader
  entries : Array[TableDirectoryEntry]
}
fn TableDirectory::output(Self, &Logger) -> Unit // from trait `Show`
fn TableDirectory::to_string(Self) -> String // from trait `Show`
impl Show for TableDirectory

pub struct TableDirectoryEntry {
  tag : String
  checksum : Int
  offset : Int
  length : Int
}
fn TableDirectoryEntry::output(Self, &Logger) -> Unit // from trait `Show`
fn TableDirectoryEntry::to_string(Self) -> String // from trait `Show`
impl Show for TableDirectoryEntry

// Type aliases

// Traits

